diff --git a/addons/account/models/account_bank_statement.py b/addons/account/models/account_bank_statement.py
index 7bec7ed1c43..e86a550a325 100644
--- a/addons/account/models/account_bank_statement.py
+++ b/addons/account/models/account_bank_statement.py
@@ -9,6 +9,7 @@ from odoo.exceptions import UserError, ValidationError
 
 import time
 import math
+import copy
 
 class AccountCashboxLine(models.Model):
     """ Cash Box Details """
@@ -811,8 +812,9 @@ class AccountBankStatementLine(models.Model):
             :param list of dicts data: must contains the keys 'counterpart_aml_dicts', 'payment_aml_ids' and 'new_aml_dicts',
                 whose value is the same as described in process_reconciliation except that ids are used instead of recordsets.
         """
+        data_copy = copy.deepcopy(data) 
         AccountMoveLine = self.env['account.move.line']
-        for st_line, datum in zip(self, data):
+        for st_line, datum in zip(self, data_copy):
             payment_aml_rec = AccountMoveLine.browse(datum.get('payment_aml_ids', []))
             for aml_dict in datum.get('counterpart_aml_dicts', []):
                 aml_dict['move_line'] = AccountMoveLine.browse(aml_dict['counterpart_aml_id'])
diff --git a/addons/account/report/account_invoice_report.py b/addons/account/report/account_invoice_report.py
index 77d026ed6ff..a431c4eee09 100644
--- a/addons/account/report/account_invoice_report.py
+++ b/addons/account/report/account_invoice_report.py
@@ -113,19 +113,19 @@ class AccountInvoiceReport(models.Model):
                     1 AS nbr,
                     ai.type, ai.state, pt.categ_id, ai.date_due, ai.account_id, ail.account_id AS account_line_id,
                     ai.partner_bank_id,
-                    SUM ((invoice_type.sign_qty * ail.quantity) / u.factor * u2.factor) AS product_qty,
+                    SUM ((invoice_type.sign_qty * ail.quantity) / coalesce(u.factor, 1,0) * u2.factor) AS product_qty,
                     SUM(ail.price_subtotal_signed * invoice_type.sign) AS price_total,
                     SUM(ABS(ail.price_subtotal_signed)) / CASE
-                            WHEN SUM(ail.quantity / u.factor * u2.factor) <> 0::numeric
-                               THEN SUM(ail.quantity / u.factor * u2.factor)
+                            WHEN SUM(ail.quantity / coalesce(u.factor, 1.0) * u2.factor) <> 0::numeric
+                               THEN SUM(ail.quantity / coalesce(u.factor, 1.0) * u2.factor)
                                ELSE 1::numeric
                             END AS price_average,
                     ai.residual_company_signed / (SELECT count(*) FROM account_invoice_line l where invoice_id = ai.id) *
                     count(*) * invoice_type.sign AS residual,
                     ai.commercial_partner_id as commercial_partner_id,
                     partner.country_id,
-                    SUM(pr.weight * (invoice_type.sign*ail.quantity) / u.factor * u2.factor) AS weight,
-                    SUM(pr.volume * (invoice_type.sign*ail.quantity) / u.factor * u2.factor) AS volume
+                    SUM(pr.weight * (invoice_type.sign*ail.quantity) / coalesce(u.factor, 1.0) * u2.factor) AS weight,
+                    SUM(pr.volume * (invoice_type.sign*ail.quantity) / coalesce(u.factor, 1.0) * u2.factor) AS volume
         """
         return select_str
 
diff --git a/addons/analytic/models/analytic_account.py b/addons/analytic/models/analytic_account.py
index 8350e1a52fa..a282ccf43d8 100644
--- a/addons/analytic/models/analytic_account.py
+++ b/addons/analytic/models/analytic_account.py
@@ -51,7 +51,7 @@ class AccountAnalyticAccount(models.Model):
     tag_ids = fields.Many2many('account.analytic.tag', 'account_analytic_account_tag_rel', 'account_id', 'tag_id', string='Tags', copy=True)
     line_ids = fields.One2many('account.analytic.line', 'account_id', string="Analytic Lines")
 
-    company_id = fields.Many2one('res.company', string='Company', required=True, default=lambda self: self.env.user.company_id)
+    company_id = fields.Many2one('res.company', string='Company', required=False, default=lambda self: self.env.user.company_id)
 
     # use auto_join to speed up name_search call
     partner_id = fields.Many2one('res.partner', string='Customer', auto_join=True, track_visibility='onchange')
diff --git a/addons/base_geolocalize/models/res_partner.py b/addons/base_geolocalize/models/res_partner.py
index 4c36ffe9207..e9b87083a21 100644
--- a/addons/base_geolocalize/models/res_partner.py
+++ b/addons/base_geolocalize/models/res_partner.py
@@ -22,6 +22,7 @@ def geo_find(addr, apikey=False):
 
     url = "https://maps.googleapis.com/maps/api/geocode/json?key=%s&sensor=false&address=" % apikey
     url += urllib2.quote(addr.encode('utf8'))
+    _logger.warning(url)
 
     try:
         result = json.load(urllib2.urlopen(url))
diff --git a/addons/calendar/models/calendar.py b/addons/calendar/models/calendar.py
index 629f4bb00c7..c6d017dbbdd 100644
--- a/addons/calendar/models/calendar.py
+++ b/addons/calendar/models/calendar.py
@@ -1598,7 +1598,8 @@ class Meeting(models.Model):
 
         # offset, limit, order and count must be treated separately as we may need to deal with virtual ids
         events = super(Meeting, self).search(new_args, offset=0, limit=0, order=None, count=False)
-        events = self.browse(events.get_recurrent_ids(args, order=order))
+        if any(arg[0] in ('start', 'stop', 'final_date','start_date','stop_date') for arg in args):
+            events = self.browse(events.get_recurrent_ids(args, order=order))
         if count:
             return len(events)
         elif limit:
diff --git a/addons/sale/models/sale.py b/addons/sale/models/sale.py
index 314c0594684..c13bb2ddffe 100644
--- a/addons/sale/models/sale.py
+++ b/addons/sale/models/sale.py
@@ -911,8 +911,8 @@ class SaleOrderLine(models.Model):
                 return result
 
         name = product.name_get()[0][1]
-        if product.description_sale:
-            name += '\n' + product.description_sale
+        #if product.description_sale:
+        #    name += '\n' + product.description_sale
         vals['name'] = name
 
         self._compute_tax_id()
diff --git a/addons/web/static/src/xml/base.xml b/addons/web/static/src/xml/base.xml
index 9d34b0f99e8..6200e2de80a 100644
--- a/addons/web/static/src/xml/base.xml
+++ b/addons/web/static/src/xml/base.xml
@@ -297,7 +297,7 @@
     </td>
 </tr>
 
-<div t-name="ListView" class="table-responsive">
+<div t-name="ListView">
     <table class="o_list_view table table-condensed table-striped">
         <t t-set="columns_count" t-value="visible_columns.length + (options.selectable ? 1 : 0) + (options.deletable ? 1 : 0)"/>
         <thead>
diff --git a/addons/web_editor/static/src/js/backend.js b/addons/web_editor/static/src/js/backend.js
index 884ef68d674..3ede84b7f37 100644
--- a/addons/web_editor/static/src/js/backend.js
+++ b/addons/web_editor/static/src/js/backend.js
@@ -47,9 +47,9 @@ var FieldTextHtmlSimple = widget.extend({
                 self.trigger('changed_value');
             }
         };
-        if (session.debug) {
+        //if (session.debug) {
             config.toolbar.splice(7, 0, ['view', ['codeview']]);
-        }
+        //}
         return config;
     },
     start: function () {
diff --git a/odoo/fields.py b/odoo/fields.py
index 9a11d8e55ab..acdc9d79eaf 100644
--- a/odoo/fields.py
+++ b/odoo/fields.py
@@ -2090,6 +2090,8 @@ class _RelationalMulti(_Relational):
                 values = record._convert_to_write(values)
                 result.append((0, 0, values))
             elif record._is_dirty():
+                # take care of adding all existing even the edited ones
+                result[0][2].append(record.id)
                 values = {name: record[name] for name in record._get_dirty()}
                 values = record._convert_to_write(values)
                 result.append((1, record.id, values))
@@ -2103,15 +2105,18 @@ class _RelationalMulti(_Relational):
         # which fields are actually dirty
         converters = [(name, value._fields[name].convert_to_onchange)
                       for name in fnames if name != 'id']
-        result = [(5,)]
+        result = [(6, 0, [])]
         for record in value:
             vals = {name: convert(record[name], record) for name, convert in converters}
             if not record.id:
                 result.append((0, 0, vals))
             elif vals:
+                # take care of adding all existing even the edited ones
+                result[0][2].append(record.id)
                 result.append((1, record.id, vals))
             else:
-                result.append((4, record.id))
+                result[0][2].append(record.id)
+
         return result
 
     def convert_to_export(self, value, record):
@@ -2437,10 +2442,13 @@ class Many2many(_RelationalMulti):
                     """.format(**parts)
             cr.execute(query, (tuple(records.ids), tuple(ids)))
 
-        def unlink_all():
+        def unlink_all(keep_ids=None):
             # remove all records for which user has access rights
             clauses, params, tables = comodel.env['ir.rule'].domain_get(comodel._name)
             cond = " AND ".join(clauses) if clauses else "1=1"
+            if keep_ids:
+                cond += " AND {rel}.{id2} not in %s".format(**parts)
+                params.append(tuple(keep_ids))
             query = """ DELETE FROM {rel} USING {tables}
                         WHERE {rel}.{id1} IN %s AND {rel}.{id2}={table}.id AND {cond}
                     """.format(table=comodel._table, tables=','.join(tables), cond=cond, **parts)
@@ -2463,7 +2471,12 @@ class Many2many(_RelationalMulti):
             elif act[0] == 5:
                 unlink_all()
             elif act[0] == 6:
-                unlink_all()
+                # commands generated by convert_to_write and convert_to_read
+                # takes care of adding all exising IDs to the (6, 0 [...])
+                # It's therefore safe to expect that we only unlink all
+                # ides except thoses in the given list of ids
+                keep_ids = set(act[2])
+                unlink_all(keep_ids)
                 link(act[2])
 
 
diff --git a/odoo/osv/expression.py b/odoo/osv/expression.py
index bef1cb1c523..c1228b0cfd2 100644
--- a/odoo/osv/expression.py
+++ b/odoo/osv/expression.py
@@ -330,16 +330,6 @@ def generate_table_alias(src_table_alias, joined_tables=[]):
         return '%s' % alias, '%s' % _quote(alias)
     for link in joined_tables:
         alias += '__' + link[1]
-    # Use an alternate alias scheme if length exceeds the PostgreSQL limit
-    # of 63 characters.
-    if len(alias) >= 64:
-        # We have to fit a crc32 hash and one underscore
-        # into a 63 character alias. The remaining space we can use to add
-        # a human readable prefix.
-        alias_hash = hex(crc32(alias))[2:]
-        ALIAS_PREFIX_LENGTH = 63 - len(alias_hash) - 1
-        alias = "%s_%s" % (
-            alias[:ALIAS_PREFIX_LENGTH], alias_hash)
     return '%s' % alias, '%s as %s' % (_quote(joined_tables[-1][0]), _quote(alias))
 
 
